#! /usr/bin/env gforth
\                                           -*- forth -*-

require ./src/vocabulary.fs

also gbforth definitions
also gbforth

require ./src/cli.fs
require ./src/rom.fs
require ./src/sym.fs
require ./src/asm.fs
require ./src/cartridge.fs
require ./src/runtime.fs
require ./src/compiler/cross.fs

also gb-assembler-impl
' romc, IS emit
' rom-offset IS offset
' romc! IS emit-to
previous

output-file to-symbol-file set-sym-file
s" ; Generated by gbforth " sym-write sym-cr sym-cr

: also-path-if-set ( addr u -- )
  dup 0 > if
    fpath also-path
  else
    2drop
  then ;

fpath clear-path
gbforth-path also-path-if-set
fpath path+ .
fpath path+ ~+

require ./src/user.fs

( We want to load the input file sealed in the GBFORTH-USER
( vocabulary. The problem is that we do not want to populate this
  vocabulary with auxiliary words to load the input-file.

  Instead, we put all the words in this colon-definition to resolve
  the word into addresses before we seal and load the game.
)

: assert-empty-stack
  depth 0<> abort" Stack is not empty" ;

: write-game
  fix-header-complement
  fix-global-checksum
  output-file dump-rom ;

:noname
  assert-empty-stack

  gbforth-user definitions
  seal also

  --no-kernel invert if
    s" ./lib/core.fs" required
  then

  ROM
  s" ./lib/header.fs" included
  RAM

  input-file included

  --no-kernel invert if
    s" ./src/prelude.fs" included
  then

  assert-empty-stack
  write-game

  --verbose if
    ." \ "  rom-offset .
    ." bytes written to "
    output-file type CR
  then

  --debug if
    also forth
    also gbforth
  else
    bye
  then

; execute

( Do not write any code after this! )
